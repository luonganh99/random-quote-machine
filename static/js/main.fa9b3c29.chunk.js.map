{"version":3,"sources":["QuoteBox.js","serviceWorker.js","index.js"],"names":["QuoteBox","useState","quote","setQuote","author","setAuthor","color","setColor","colors","handleClick","axios","get","then","res","randQuote","randColor","quotes","data","Math","floor","random","useEffect","document","querySelector","style","backgroundColor","twitterUrl","encodeURIComponent","tubmlrUrl","className","id","icon","faQuoteLeft","href","target","faTwitter","faTumblr","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8RAOe,SAASA,IAAY,IAAD,EACLC,mBAAS,IADJ,mBACxBC,EADwB,KACjBC,EADiB,OAEHF,mBAAS,IAFN,mBAExBG,EAFwB,KAEhBC,EAFgB,OAGLJ,mBAAS,IAHJ,mBAGxBK,EAHwB,KAGjBC,EAHiB,KAKzBC,EAAS,CACX,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGEC,EAAc,WAChBC,IACKC,IACG,0IAEHC,MAAK,SAACC,GAEH,IAEIC,EAKAC,EAPEC,EAASH,EAAII,KAAKD,OAGxB,GACIF,EAAYI,KAAKC,MAAsB,IAAhBD,KAAKE,gBACvBJ,EAAOF,GAAWZ,QAAUA,GAGrC,GACIa,EAAYG,KAAKC,MAAsB,GAAhBD,KAAKE,gBACvBZ,EAAOO,KAAeT,GAE/BH,EAASa,EAAOF,GAAWZ,OAC3BG,EAAUW,EAAOF,GAAWV,QAC5BG,EAASC,EAAOO,QAI5BM,qBAAU,WACNZ,MACD,IAEHY,qBAAU,WACNC,SAASC,cAAc,cAAcC,MAAMC,gBAAkBnB,EAC7DgB,SAASC,cAAc,cAAcC,MAAMlB,MAAQA,EACnDgB,SAASC,cAAc,gBAAgBC,MAAMC,gBAAkBnB,EAC/DgB,SAASC,cAAc,iBAAiBC,MAAMC,gBAAkBnB,EAChEgB,SAASC,cAAc,cAAcC,MAAMC,gBAAkBnB,KAGjE,IAAMoB,EACF,8EACAC,mBAAmB,IAAMzB,EAAQ,KAAOE,GAEtCwB,EACF,6FACAD,mBAAmBvB,GACnB,YACAuB,mBAAmBzB,GACnB,uFAEJ,OACI,yBAAK2B,UAAU,aACX,yBAAKC,GAAG,aACJ,wBAAIA,GAAG,QACH,kBAAC,IAAD,CAAiBC,KAAMC,MAD3B,IAC4C9B,GAE5C,uBAAG4B,GAAG,UAAN,KAAkB1B,GAClB,yBAAKyB,UAAU,UACX,uBAAGI,KAAMP,EAAYQ,OAAO,UAAUJ,GAAG,eACrC,kBAAC,IAAD,CAAiBC,KAAMI,OAE3B,uBAAGF,KAAML,EAAWM,OAAO,UAAUJ,GAAG,gBACpC,kBAAC,IAAD,CAAiBC,KAAMK,OAE3B,4BAAQC,QAAS5B,EAAaqB,GAAG,aAAjC,gBC3EAQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC7C,EAAD,OAEJsB,SAASwB,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fa9b3c29.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { faTwitter, faTumblr } from '@fortawesome/free-brands-svg-icons/';\r\n\r\nimport axios from 'axios';\r\n\r\nexport default function QuoteBox() {\r\n    const [quote, setQuote] = useState('');\r\n    const [author, setAuthor] = useState('');\r\n    const [color, setColor] = useState('');\r\n\r\n    const colors = [\r\n        '#7fdbda',\r\n        '#006a71',\r\n        '#6a2c70',\r\n        '#febf63',\r\n        '#221f3b',\r\n        '#6f4a8e',\r\n        '#99b898',\r\n        '#ff847c',\r\n        '#e84a5f',\r\n        '#900d0d',\r\n    ];\r\n\r\n    const handleClick = () => {\r\n        axios\r\n            .get(\r\n                'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\r\n            )\r\n            .then((res) => {\r\n                // Random number\r\n                const quotes = res.data.quotes;\r\n\r\n                let randQuote;\r\n                do {\r\n                    randQuote = Math.floor(Math.random() * 102);\r\n                } while (quotes[randQuote].quote === quote);\r\n\r\n                let randColor;\r\n                do {\r\n                    randColor = Math.floor(Math.random() * 10);\r\n                } while (colors[randColor] === color);\r\n\r\n                setQuote(quotes[randQuote].quote);\r\n                setAuthor(quotes[randQuote].author);\r\n                setColor(colors[randColor]);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        handleClick();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        document.querySelector('.container').style.backgroundColor = color;\r\n        document.querySelector('#quote-box').style.color = color;\r\n        document.querySelector('#tweet-quote').style.backgroundColor = color;\r\n        document.querySelector('#tumblr-quote').style.backgroundColor = color;\r\n        document.querySelector('#new-quote').style.backgroundColor = color;\r\n    });\r\n\r\n    const twitterUrl =\r\n        'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' +\r\n        encodeURIComponent('\"' + quote + '\" ' + author);\r\n\r\n    const tubmlrUrl =\r\n        'https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes,freecodecamp&caption=' +\r\n        encodeURIComponent(author) +\r\n        '&content=' +\r\n        encodeURIComponent(quote) +\r\n        '&canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&shareSource=tumblr_share_button';\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div id='quote-box'>\r\n                <h3 id='text'>\r\n                    <FontAwesomeIcon icon={faQuoteLeft} /> {quote}\r\n                </h3>\r\n                <p id='author'>- {author}</p>\r\n                <div className='footer'>\r\n                    <a href={twitterUrl} target='__blank' id='tweet-quote'>\r\n                        <FontAwesomeIcon icon={faTwitter} />\r\n                    </a>\r\n                    <a href={tubmlrUrl} target='__blank' id='tumblr-quote'>\r\n                        <FontAwesomeIcon icon={faTumblr} />\r\n                    </a>\r\n                    <button onClick={handleClick} id='new-quote'>\r\n                        New Quote\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport QuoteBox from './QuoteBox';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <QuoteBox />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}